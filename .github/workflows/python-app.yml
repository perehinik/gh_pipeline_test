name: GitHub pypeline test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: "3.9"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt5
        pip install pyinstaller
    - name: Build EXE
      run: |
        pyinstaller pypeline_test.spec
    - name: Display structure of downloaded files
      run: ls -R
    - uses: actions/upload-artifact@v3
      with:
        name: pypeline_test.exe
        path: dist/
        retention-days: 5
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        zip --junk-paths my-artifact pypeline_test.exe
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}_${{ github.run_id }}
        release_name: Release ${{ github.ref }}_${{ github.run_id }}
        draft: false
        prerelease: false
    - name: upload windows artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip
    
#     - uses: actions/download-artifact@v3
#       with:
#         name: dist/pypeline_test.exe
